@startuml

title Trackingbot Architecure

package bot{
    interface MessageBot{
        + apply(cmds : Vec<MessageCommand>)
        + start() : JoinHandle
    }
    class TelegramBot
    
    class BotBuilder{
        + new() : BotBuilder
        + build(config : AppConfig, type : BotType) : MessageBot>
    }
    
    enum BotType{
        + Telegram
    }
    
    package commands{
        interface MessageCommand{
            + exec_cmd(args: Vec<String>, chat: Chat) : Result<String,CommandError>
            + exec_cmd_mut(args: Vec<String>>,chat: Chat) : Result<String,CommandError>
            + type() : CommandType
            + need_mut() : bool
        }
        class TrackingStateCommand{
            - dao: TrackingStateService
        }
        enum CommandType{
            + SingleCommand
            + ChatCommand
        }

        package services{

            interface TrackingStateService{
                + state(tracking_code: String) -> Result<Option<TrackingState>,Error>
            }

            class TrackingStateServiceImpl{
                + TrackingStateServiceImpl(config: DatabaseConfig)
            }

            class TrackingState{
                - access_key: u64
                - delivery_address: String
                - delivered_to: String
                - order_state: String
                --
                + key(): u64
                + delivery_address(): String
                + delivered_to(): String
                + state(): String
            }
        }

        class Chat
        class Message

        enum CommandError{
            + IllegalArguments
            + NoArguments
            + InternalCommandError
            + IOError
        }
    }
}

    package config{
        class AppConfig{
            - telegram_apikey: String
            - databaseConfig: DatabaseConfig
            --
            + new(apikey: String, config: DatabaseConfig): AppConfig
            + telegram_apikey(): String
            + databaseConfig(): DatabaseConfig
        }
        class DatabaseConfig{
            - port: u16
            - host: String
            - user: String
            - password: String
            - database: String
            --
            + port(): u16
            + host(): String
            + user(): String
            + password(): String
            + database(): String
        }
        class ConfigLoader{
            + load() : Result<AppConfig,Error>
    }
}

BotBuilder --> BotType
BotBuilder --> AppConfig
BotBuilder --> MessageBot

Chat ---* Message

TelegramBot --|> MessageBot

MessageCommand --> Chat
MessageCommand --> CommandType
MessageCommand --> CommandError

TrackingStateService --> TrackingState
TrackingStateServiceImpl --|> TrackingStateService
TrackingStateServiceImpl --* DatabaseConfig

TrackingStateCommand --|> MessageCommand
TrackingStateCommand --> TrackingStateService
MessageBot --> MessageCommand

AppConfig --> DatabaseConfig
ConfigLoader --> AppConfig



@enduml
